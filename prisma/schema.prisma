generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id           String        @id @default(cuid())
  title        String
  content      String
  tags         Tag[]
  views        Int           @default(0)
  upvotes      User[]        @relation("QuestionUpvotes")
  downvotes    User[]        @relation("QuestionDownvotes")
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  createdAt    DateTime      @default(now())
  answers      Answer[]
  savedByUsers User[]        @relation("SavedQuestions")
  Interaction  Interaction[]

  @@index([title])
}

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  questions   Question[]
  followers   User[]
  createdAt   DateTime      @default(now())
  Interaction Interaction[]

  users       User[]  @relation("UserTopTags")

  @@index([name])
}

model User {
  id                 String        @id @default(cuid())
  name               String
  clerkId            String        @unique
  username           String        @unique
  email              String        @unique
  password           String?
  bio                String?
  picture            String
  location           String?
  portfolioWebsite   String?
  reputation         Int           @default(0)
  savedQuestions     Question[]    @relation("SavedQuestions")
  authoredQuestions  Question[]
  joinedAt           DateTime      @default(now())
  followedTags       Tag[]
  upvotedQuestions   Question[]    @relation("QuestionUpvotes")
  downvotedQuestions Question[]    @relation("QuestionDownvotes")
  authoredAnswers    Answer[]
  upvotedAnswers     Answer[]      @relation("AnswerUpvotes")
  downvotedAnswers   Answer[]      @relation("AnswerDownvotes")
  Interaction        Interaction[]
  topTags  Tag[] @relation("UserTopTags")

  @@index([username])
  @@index([clerkId])
}

model Answer {
  id          String        @id @default(cuid())
  content     String
  question    Question?     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String?
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  upvotes     User[]        @relation("AnswerUpvotes")
  downvotes   User[]        @relation("AnswerDownvotes")
  createdAt   DateTime      @default(now())
  Interaction Interaction[]
}

model Interaction {
  id         String   @id @default(cuid())
  action     String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerId   String?
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  tags       Tag[]
}
